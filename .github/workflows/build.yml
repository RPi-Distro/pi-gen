name: Build Image

on:
  repository_dispatch:
  workflow_dispatch:
  push:
  schedule: 
    - cron: '0 0 1 * *'

# TODO:  These jobs are so similar except for just ssh.
#        I'd love to find a way to not have so much repetition between these configurations.
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Maximize Build Space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 10240 
        swap-size-mb: 1024
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'

    - name: List Available Space
      run: |
        echo "Free space:"
        df -h

    - name: Install Dependencies
      run: |
        sudo apt update
        sudo apt install -y coreutils quilt parted qemu-user-static debootstrap zerofree zip dosfstools libarchive-tools libcap2-bin grep rsync xz-utils file git curl bc qemu-utils kpartx gpg

    - name: Checkout PiGen
      uses: actions/checkout@v3

    - name: Create Config File
      id: config
      run: |
        NOW=$(date +"%Y-%m-%d-%H%M")
        IMAGE=Raspbian-${GITHUB_REF##*/}-$NOW
        touch config
        echo IMG_NAME=$IMAGE >> config
        echo "image=$IMAGE"  >> $GITHUB_OUTPUT

    # Greatly speed up our build because we don't need a desktop
    # or anything more advanced for our little IoT devices.
#    - name: Disable Non-Lite Builds
#      run: |
#        cd PiGen
#        touch ./stage3/SKIP ./stage4/SKIP ./stage5/SKIP
#        touch ./stage4/SKIP_IMAGES ./stage5/SKIP_IMAGES

    - name: Build Image
      run: |
        ./build-docker.sh

    - name: Get Image Name
      id: imagefile
      run: |
        cd deploy
        ls
        IMAGE_FILE=$(ls *.img)
        echo "imagefile=$IMAGE_FILE" >> $GITHUB_OUTPUT

    # The image now exists in deploy/.  Let's save it somewhere.
    - uses: actions/upload-artifact@v1
      with:
        name: ${{ steps.config.outputs.image }}
        path: deploy/${{ steps.imagefile.outputs.imagefile }}
